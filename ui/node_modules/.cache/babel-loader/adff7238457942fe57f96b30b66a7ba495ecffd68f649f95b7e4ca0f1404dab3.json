{"ast":null,"code":"import _objectSpread from\"/Users/mohaimenkhan/repos/research-comm/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Location service for detecting user location and finding nearby cities\nclass LocationService{constructor(){this.currentLocation=null;this.nearbyCities=[];}// Calculate distance between two coordinates in miles\ncalculateDistance(lat1,lon1,lat2,lon2){const R=3959;// Earth's radius in miles\nconst dLat=this.toRadians(lat2-lat1);const dLon=this.toRadians(lon2-lon1);const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(this.toRadians(lat1))*Math.cos(this.toRadians(lat2))*Math.sin(dLon/2)*Math.sin(dLon/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;}toRadians(degrees){return degrees*(Math.PI/180);}// Cities database prioritizing USA and Canada for your user base\ngetAllCities(){return[// Canada - Priority for your user base\n{city:'Toronto',province:'ON',country:'Canada',coordinates:[43.6532,-79.3832]},{city:'Vancouver',province:'BC',country:'Canada',coordinates:[49.2827,-123.1207]},{city:'Montreal',province:'QC',country:'Canada',coordinates:[45.5017,-73.5673]},{city:'Calgary',province:'AB',country:'Canada',coordinates:[51.0447,-114.0719]},{city:'Edmonton',province:'AB',country:'Canada',coordinates:[53.5461,-113.4938]},{city:'Ottawa',province:'ON',country:'Canada',coordinates:[45.4215,-75.6972]},{city:'Winnipeg',province:'MB',country:'Canada',coordinates:[49.8951,-97.1384]},{city:'Quebec City',province:'QC',country:'Canada',coordinates:[46.8139,-71.2080]},{city:'Hamilton',province:'ON',country:'Canada',coordinates:[43.2557,-79.8711]},{city:'Kitchener',province:'ON',country:'Canada',coordinates:[43.4516,-80.4925]},{city:'London',province:'ON',country:'Canada',coordinates:[42.9849,-81.2453]},{city:'Halifax',province:'NS',country:'Canada',coordinates:[44.6488,-63.5752]},{city:'Victoria',province:'BC',country:'Canada',coordinates:[48.4284,-123.3656]},{city:'Windsor',province:'ON',country:'Canada',coordinates:[42.3149,-83.0364]},{city:'Saskatoon',province:'SK',country:'Canada',coordinates:[52.1332,-106.6700]},{city:'Regina',province:'SK',country:'Canada',coordinates:[50.4452,-104.6189]},{city:'Langley',province:'BC',country:'Canada',coordinates:[49.1042,-122.6604]},// United States - Priority for your user base\n{city:'New York',state:'NY',country:'USA',coordinates:[40.7128,-74.0060]},{city:'Los Angeles',state:'CA',country:'USA',coordinates:[34.0522,-118.2437]},{city:'Chicago',state:'IL',country:'USA',coordinates:[41.8781,-87.6298]},{city:'Houston',state:'TX',country:'USA',coordinates:[29.7604,-95.3698]},{city:'Phoenix',state:'AZ',country:'USA',coordinates:[33.4484,-112.0740]},{city:'Philadelphia',state:'PA',country:'USA',coordinates:[39.9526,-75.1652]},{city:'San Antonio',state:'TX',country:'USA',coordinates:[29.4241,-98.4936]},{city:'San Diego',state:'CA',country:'USA',coordinates:[32.7157,-117.1611]},{city:'Dallas',state:'TX',country:'USA',coordinates:[32.7767,-96.7970]},{city:'San Jose',state:'CA',country:'USA',coordinates:[37.3382,-121.8863]},{city:'Austin',state:'TX',country:'USA',coordinates:[30.2672,-97.7431]},{city:'Jacksonville',state:'FL',country:'USA',coordinates:[30.3322,-81.6557]},{city:'Fort Worth',state:'TX',country:'USA',coordinates:[32.7555,-97.3308]},{city:'Columbus',state:'OH',country:'USA',coordinates:[39.9612,-82.9988]},{city:'San Francisco',state:'CA',country:'USA',coordinates:[37.7749,-122.4194]},{city:'Charlotte',state:'NC',country:'USA',coordinates:[35.2271,-80.8431]},{city:'Indianapolis',state:'IN',country:'USA',coordinates:[39.7684,-86.1581]},{city:'Seattle',state:'WA',country:'USA',coordinates:[47.6062,-122.3321]},{city:'Denver',state:'CO',country:'USA',coordinates:[39.7392,-104.9903]},{city:'Washington',state:'DC',country:'USA',coordinates:[38.9072,-77.0369]},{city:'Boston',state:'MA',country:'USA',coordinates:[42.3601,-71.0589]},{city:'Nashville',state:'TN',country:'USA',coordinates:[36.1627,-86.7816]},{city:'Baltimore',state:'MD',country:'USA',coordinates:[39.2904,-76.6122]},{city:'Portland',state:'OR',country:'USA',coordinates:[45.5152,-122.6784]},{city:'Miami',state:'FL',country:'USA',coordinates:[25.7617,-80.1918]},{city:'Atlanta',state:'GA',country:'USA',coordinates:[33.7490,-84.3880]},{city:'Tampa',state:'FL',country:'USA',coordinates:[27.9506,-82.4572]},{city:'Orlando',state:'FL',country:'USA',coordinates:[28.5383,-81.3792]},{city:'Detroit',state:'MI',country:'USA',coordinates:[42.3314,-83.0458]},{city:'Las Vegas',state:'NV',country:'USA',coordinates:[36.1699,-115.1398]},{city:'Minneapolis',state:'MN',country:'USA',coordinates:[44.9778,-93.2650]},{city:'Cleveland',state:'OH',country:'USA',coordinates:[41.4993,-81.6944]},{city:'Pittsburgh',state:'PA',country:'USA',coordinates:[40.4406,-79.9959]},{city:'Sacramento',state:'CA',country:'USA',coordinates:[38.5816,-121.4944]},// International cities (for global users)\n{city:'London',country:'United Kingdom',coordinates:[51.5074,-0.1278]},{city:'Paris',country:'France',coordinates:[48.8566,2.3522]},{city:'Berlin',country:'Germany',coordinates:[52.5200,13.4050]},{city:'Sydney',state:'NSW',country:'Australia',coordinates:[-33.8688,151.2093]},{city:'Melbourne',state:'VIC',country:'Australia',coordinates:[-37.8136,144.9631]},{city:'Tokyo',country:'Japan',coordinates:[35.6762,139.6503]},{city:'Mexico City',country:'Mexico',coordinates:[19.4326,-99.1332]},// Additional international cities\n{city:'Amsterdam',country:'Netherlands',coordinates:[52.3676,4.9041]},{city:'Barcelona',country:'Spain',coordinates:[41.3851,2.1734]},{city:'Rome',country:'Italy',coordinates:[41.9028,12.4964]},{city:'Stockholm',country:'Sweden',coordinates:[59.3293,18.0686]},{city:'Zurich',country:'Switzerland',coordinates:[47.3769,8.5417]},{city:'Dublin',country:'Ireland',coordinates:[53.3498,-6.2603]},// Eastern Europe & Balkans\n{city:'Sarajevo',country:'Bosnia and Herzegovina',coordinates:[43.8563,18.4131]},{city:'Belgrade',country:'Serbia',coordinates:[44.7866,20.4489]},{city:'Zagreb',country:'Croatia',coordinates:[45.8150,15.9819]},{city:'Vienna',country:'Austria',coordinates:[48.2082,16.3738]},{city:'Prague',country:'Czech Republic',coordinates:[50.0755,14.4378]},{city:'Budapest',country:'Hungary',coordinates:[47.4979,19.0402]}];}// Get user's current location using geolocation API\nasync getCurrentLocation(){return new Promise((resolve,reject)=>{if(!navigator.geolocation){reject(new Error('Geolocation is not supported by this browser'));return;}navigator.geolocation.getCurrentPosition(async position=>{const{latitude,longitude}=position.coords;try{// Try to reverse geocode to get city name\nconst cityName=await this.reverseGeocode(latitude,longitude);const location={coordinates:[latitude,longitude],city:cityName.city||'Unknown City',state:cityName.state||cityName.province,country:cityName.country||'USA',detected:true};this.currentLocation=location;resolve(location);}catch(error){// If reverse geocoding fails, still return coordinates\nconst location={coordinates:[latitude,longitude],city:'Current Location',state:'',country:'',detected:true};this.currentLocation=location;resolve(location);}},error=>{console.error('Geolocation error:',error);reject(error);},{enableHighAccuracy:true,timeout:10000,maximumAge:300000// 5 minutes\n});});}// Simple reverse geocoding - in production you'd use a real service\nasync reverseGeocode(lat,lon){// For demo, find the closest city in our database\nconst cities=this.getAllCities();let closestCity=null;let minDistance=Infinity;cities.forEach(city=>{const distance=this.calculateDistance(lat,lon,city.coordinates[0],city.coordinates[1]);if(distance<minDistance){minDistance=distance;closestCity=city;}});return closestCity||{city:'Unknown',state:'',country:''};}// Get cities within specified radius (in miles)\ngetCitiesWithinRadius(centerLat,centerLon){let radiusMiles=arguments.length>2&&arguments[2]!==undefined?arguments[2]:100;const cities=this.getAllCities();const nearbyCities=[];cities.forEach(city=>{const distance=this.calculateDistance(centerLat,centerLon,city.coordinates[0],city.coordinates[1]);if(distance<=radiusMiles){nearbyCities.push(_objectSpread(_objectSpread({},city),{},{distance:Math.round(distance)}));}});// Sort by distance\nnearbyCities.sort((a,b)=>a.distance-b.distance);this.nearbyCities=nearbyCities;return nearbyCities;}// Search cities by name\nsearchCities(query){if(!query||query.length<2)return[];const cities=this.getAllCities();const lowerQuery=query.toLowerCase();return cities.filter(city=>city.city.toLowerCase().includes(lowerQuery)||city.state&&city.state.toLowerCase().includes(lowerQuery)||city.province&&city.province.toLowerCase().includes(lowerQuery)).slice(0,10);// Limit to 10 results\n}// Format location for display\nformatLocation(location){if(location.state){return\"\".concat(location.city,\", \").concat(location.state);}else if(location.province){return\"\".concat(location.city,\", \").concat(location.province);}return location.city;}// Get popular locations for the area based on user's actual location\ngetPopularLocationsForArea(lat,lon){// Get cities within 500 miles to be more inclusive for North American users\nconst nearby=this.getCitiesWithinRadius(lat,lon,500);// Prioritize nearby cities from USA and Canada\nconst priorityCountries=['USA','Canada'];// Separate priority countries from international\nconst priorityCities=nearby.filter(city=>priorityCountries.includes(city.country));const internationalCities=nearby.filter(city=>!priorityCountries.includes(city.country));// Combine: priority cities first, then international, all sorted by distance\nconst sortedCities=[...priorityCities.slice(0,6),// Top 6 from USA/Canada\n...internationalCities.slice(0,2)// Top 2 international\n].sort((a,b)=>a.distance-b.distance);// If we don't have enough cities in range, add top cities from priority countries\nif(sortedCities.length<8){const allCities=this.getAllCities();const topPriorityCities=allCities.filter(city=>priorityCountries.includes(city.country)).filter(city=>!sortedCities.find(s=>s.city===city.city)).slice(0,8-sortedCities.length);sortedCities.push(...topPriorityCities);}return sortedCities.slice(0,8);}}export default new LocationService();","map":{"version":3,"names":["LocationService","constructor","currentLocation","nearbyCities","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","toRadians","dLon","a","Math","sin","cos","c","atan2","sqrt","degrees","PI","getAllCities","city","province","country","coordinates","state","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","latitude","longitude","coords","cityName","reverseGeocode","location","detected","error","console","enableHighAccuracy","timeout","maximumAge","lat","lon","cities","closestCity","minDistance","Infinity","forEach","distance","getCitiesWithinRadius","centerLat","centerLon","radiusMiles","arguments","length","undefined","push","_objectSpread","round","sort","b","searchCities","query","lowerQuery","toLowerCase","filter","includes","slice","formatLocation","concat","getPopularLocationsForArea","nearby","priorityCountries","priorityCities","internationalCities","sortedCities","allCities","topPriorityCities","find","s"],"sources":["/Users/mohaimenkhan/repos/research-comm/ui/src/services/locationService.js"],"sourcesContent":["// Location service for detecting user location and finding nearby cities\nclass LocationService {\n  constructor() {\n    this.currentLocation = null;\n    this.nearbyCities = [];\n  }\n\n  // Calculate distance between two coordinates in miles\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a =\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  toRadians(degrees) {\n    return degrees * (Math.PI/180);\n  }\n\n  // Cities database prioritizing USA and Canada for your user base\n  getAllCities() {\n    return [\n      // Canada - Priority for your user base\n      { city: 'Toronto', province: 'ON', country: 'Canada', coordinates: [43.6532, -79.3832] },\n      { city: 'Vancouver', province: 'BC', country: 'Canada', coordinates: [49.2827, -123.1207] },\n      { city: 'Montreal', province: 'QC', country: 'Canada', coordinates: [45.5017, -73.5673] },\n      { city: 'Calgary', province: 'AB', country: 'Canada', coordinates: [51.0447, -114.0719] },\n      { city: 'Edmonton', province: 'AB', country: 'Canada', coordinates: [53.5461, -113.4938] },\n      { city: 'Ottawa', province: 'ON', country: 'Canada', coordinates: [45.4215, -75.6972] },\n      { city: 'Winnipeg', province: 'MB', country: 'Canada', coordinates: [49.8951, -97.1384] },\n      { city: 'Quebec City', province: 'QC', country: 'Canada', coordinates: [46.8139, -71.2080] },\n      { city: 'Hamilton', province: 'ON', country: 'Canada', coordinates: [43.2557, -79.8711] },\n      { city: 'Kitchener', province: 'ON', country: 'Canada', coordinates: [43.4516, -80.4925] },\n      { city: 'London', province: 'ON', country: 'Canada', coordinates: [42.9849, -81.2453] },\n      { city: 'Halifax', province: 'NS', country: 'Canada', coordinates: [44.6488, -63.5752] },\n      { city: 'Victoria', province: 'BC', country: 'Canada', coordinates: [48.4284, -123.3656] },\n      { city: 'Windsor', province: 'ON', country: 'Canada', coordinates: [42.3149, -83.0364] },\n      { city: 'Saskatoon', province: 'SK', country: 'Canada', coordinates: [52.1332, -106.6700] },\n      { city: 'Regina', province: 'SK', country: 'Canada', coordinates: [50.4452, -104.6189] },\n      { city: 'Langley', province: 'BC', country: 'Canada', coordinates: [49.1042, -122.6604] },\n\n      // United States - Priority for your user base\n      { city: 'New York', state: 'NY', country: 'USA', coordinates: [40.7128, -74.0060] },\n      { city: 'Los Angeles', state: 'CA', country: 'USA', coordinates: [34.0522, -118.2437] },\n      { city: 'Chicago', state: 'IL', country: 'USA', coordinates: [41.8781, -87.6298] },\n      { city: 'Houston', state: 'TX', country: 'USA', coordinates: [29.7604, -95.3698] },\n      { city: 'Phoenix', state: 'AZ', country: 'USA', coordinates: [33.4484, -112.0740] },\n      { city: 'Philadelphia', state: 'PA', country: 'USA', coordinates: [39.9526, -75.1652] },\n      { city: 'San Antonio', state: 'TX', country: 'USA', coordinates: [29.4241, -98.4936] },\n      { city: 'San Diego', state: 'CA', country: 'USA', coordinates: [32.7157, -117.1611] },\n      { city: 'Dallas', state: 'TX', country: 'USA', coordinates: [32.7767, -96.7970] },\n      { city: 'San Jose', state: 'CA', country: 'USA', coordinates: [37.3382, -121.8863] },\n      { city: 'Austin', state: 'TX', country: 'USA', coordinates: [30.2672, -97.7431] },\n      { city: 'Jacksonville', state: 'FL', country: 'USA', coordinates: [30.3322, -81.6557] },\n      { city: 'Fort Worth', state: 'TX', country: 'USA', coordinates: [32.7555, -97.3308] },\n      { city: 'Columbus', state: 'OH', country: 'USA', coordinates: [39.9612, -82.9988] },\n      { city: 'San Francisco', state: 'CA', country: 'USA', coordinates: [37.7749, -122.4194] },\n      { city: 'Charlotte', state: 'NC', country: 'USA', coordinates: [35.2271, -80.8431] },\n      { city: 'Indianapolis', state: 'IN', country: 'USA', coordinates: [39.7684, -86.1581] },\n      { city: 'Seattle', state: 'WA', country: 'USA', coordinates: [47.6062, -122.3321] },\n      { city: 'Denver', state: 'CO', country: 'USA', coordinates: [39.7392, -104.9903] },\n      { city: 'Washington', state: 'DC', country: 'USA', coordinates: [38.9072, -77.0369] },\n      { city: 'Boston', state: 'MA', country: 'USA', coordinates: [42.3601, -71.0589] },\n      { city: 'Nashville', state: 'TN', country: 'USA', coordinates: [36.1627, -86.7816] },\n      { city: 'Baltimore', state: 'MD', country: 'USA', coordinates: [39.2904, -76.6122] },\n      { city: 'Portland', state: 'OR', country: 'USA', coordinates: [45.5152, -122.6784] },\n      { city: 'Miami', state: 'FL', country: 'USA', coordinates: [25.7617, -80.1918] },\n      { city: 'Atlanta', state: 'GA', country: 'USA', coordinates: [33.7490, -84.3880] },\n      { city: 'Tampa', state: 'FL', country: 'USA', coordinates: [27.9506, -82.4572] },\n      { city: 'Orlando', state: 'FL', country: 'USA', coordinates: [28.5383, -81.3792] },\n      { city: 'Detroit', state: 'MI', country: 'USA', coordinates: [42.3314, -83.0458] },\n      { city: 'Las Vegas', state: 'NV', country: 'USA', coordinates: [36.1699, -115.1398] },\n      { city: 'Minneapolis', state: 'MN', country: 'USA', coordinates: [44.9778, -93.2650] },\n      { city: 'Cleveland', state: 'OH', country: 'USA', coordinates: [41.4993, -81.6944] },\n      { city: 'Pittsburgh', state: 'PA', country: 'USA', coordinates: [40.4406, -79.9959] },\n      { city: 'Sacramento', state: 'CA', country: 'USA', coordinates: [38.5816, -121.4944] },\n\n      // International cities (for global users)\n      { city: 'London', country: 'United Kingdom', coordinates: [51.5074, -0.1278] },\n      { city: 'Paris', country: 'France', coordinates: [48.8566, 2.3522] },\n      { city: 'Berlin', country: 'Germany', coordinates: [52.5200, 13.4050] },\n      { city: 'Sydney', state: 'NSW', country: 'Australia', coordinates: [-33.8688, 151.2093] },\n      { city: 'Melbourne', state: 'VIC', country: 'Australia', coordinates: [-37.8136, 144.9631] },\n      { city: 'Tokyo', country: 'Japan', coordinates: [35.6762, 139.6503] },\n      { city: 'Mexico City', country: 'Mexico', coordinates: [19.4326, -99.1332] },\n\n      // Additional international cities\n      { city: 'Amsterdam', country: 'Netherlands', coordinates: [52.3676, 4.9041] },\n      { city: 'Barcelona', country: 'Spain', coordinates: [41.3851, 2.1734] },\n      { city: 'Rome', country: 'Italy', coordinates: [41.9028, 12.4964] },\n      { city: 'Stockholm', country: 'Sweden', coordinates: [59.3293, 18.0686] },\n      { city: 'Zurich', country: 'Switzerland', coordinates: [47.3769, 8.5417] },\n      { city: 'Dublin', country: 'Ireland', coordinates: [53.3498, -6.2603] },\n\n      // Eastern Europe & Balkans\n      { city: 'Sarajevo', country: 'Bosnia and Herzegovina', coordinates: [43.8563, 18.4131] },\n      { city: 'Belgrade', country: 'Serbia', coordinates: [44.7866, 20.4489] },\n      { city: 'Zagreb', country: 'Croatia', coordinates: [45.8150, 15.9819] },\n      { city: 'Vienna', country: 'Austria', coordinates: [48.2082, 16.3738] },\n      { city: 'Prague', country: 'Czech Republic', coordinates: [50.0755, 14.4378] },\n      { city: 'Budapest', country: 'Hungary', coordinates: [47.4979, 19.0402] }\n    ];\n  }\n\n  // Get user's current location using geolocation API\n  async getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation is not supported by this browser'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n\n          try {\n            // Try to reverse geocode to get city name\n            const cityName = await this.reverseGeocode(latitude, longitude);\n            const location = {\n              coordinates: [latitude, longitude],\n              city: cityName.city || 'Unknown City',\n              state: cityName.state || cityName.province,\n              country: cityName.country || 'USA',\n              detected: true\n            };\n\n            this.currentLocation = location;\n            resolve(location);\n          } catch (error) {\n            // If reverse geocoding fails, still return coordinates\n            const location = {\n              coordinates: [latitude, longitude],\n              city: 'Current Location',\n              state: '',\n              country: '',\n              detected: true\n            };\n\n            this.currentLocation = location;\n            resolve(location);\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          reject(error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000 // 5 minutes\n        }\n      );\n    });\n  }\n\n  // Simple reverse geocoding - in production you'd use a real service\n  async reverseGeocode(lat, lon) {\n    // For demo, find the closest city in our database\n    const cities = this.getAllCities();\n    let closestCity = null;\n    let minDistance = Infinity;\n\n    cities.forEach(city => {\n      const distance = this.calculateDistance(lat, lon, city.coordinates[0], city.coordinates[1]);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestCity = city;\n      }\n    });\n\n    return closestCity || { city: 'Unknown', state: '', country: '' };\n  }\n\n  // Get cities within specified radius (in miles)\n  getCitiesWithinRadius(centerLat, centerLon, radiusMiles = 100) {\n    const cities = this.getAllCities();\n    const nearbyCities = [];\n\n    cities.forEach(city => {\n      const distance = this.calculateDistance(\n        centerLat, centerLon,\n        city.coordinates[0], city.coordinates[1]\n      );\n\n      if (distance <= radiusMiles) {\n        nearbyCities.push({\n          ...city,\n          distance: Math.round(distance)\n        });\n      }\n    });\n\n    // Sort by distance\n    nearbyCities.sort((a, b) => a.distance - b.distance);\n\n    this.nearbyCities = nearbyCities;\n    return nearbyCities;\n  }\n\n  // Search cities by name\n  searchCities(query) {\n    if (!query || query.length < 2) return [];\n\n    const cities = this.getAllCities();\n    const lowerQuery = query.toLowerCase();\n\n    return cities.filter(city =>\n      city.city.toLowerCase().includes(lowerQuery) ||\n      (city.state && city.state.toLowerCase().includes(lowerQuery)) ||\n      (city.province && city.province.toLowerCase().includes(lowerQuery))\n    ).slice(0, 10); // Limit to 10 results\n  }\n\n  // Format location for display\n  formatLocation(location) {\n    if (location.state) {\n      return `${location.city}, ${location.state}`;\n    } else if (location.province) {\n      return `${location.city}, ${location.province}`;\n    }\n    return location.city;\n  }\n\n  // Get popular locations for the area based on user's actual location\n  getPopularLocationsForArea(lat, lon) {\n    // Get cities within 500 miles to be more inclusive for North American users\n    const nearby = this.getCitiesWithinRadius(lat, lon, 500);\n\n    // Prioritize nearby cities from USA and Canada\n    const priorityCountries = ['USA', 'Canada'];\n\n    // Separate priority countries from international\n    const priorityCities = nearby.filter(city =>\n      priorityCountries.includes(city.country)\n    );\n\n    const internationalCities = nearby.filter(city =>\n      !priorityCountries.includes(city.country)\n    );\n\n    // Combine: priority cities first, then international, all sorted by distance\n    const sortedCities = [\n      ...priorityCities.slice(0, 6),  // Top 6 from USA/Canada\n      ...internationalCities.slice(0, 2)  // Top 2 international\n    ].sort((a, b) => a.distance - b.distance);\n\n    // If we don't have enough cities in range, add top cities from priority countries\n    if (sortedCities.length < 8) {\n      const allCities = this.getAllCities();\n      const topPriorityCities = allCities\n        .filter(city => priorityCountries.includes(city.country))\n        .filter(city => !sortedCities.find(s => s.city === city.city))\n        .slice(0, 8 - sortedCities.length);\n\n      sortedCities.push(...topPriorityCities);\n    }\n\n    return sortedCities.slice(0, 8);\n  }\n}\n\nexport default new LocationService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}