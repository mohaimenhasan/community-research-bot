{"ast":null,"code":"import _objectSpread from\"/Users/mohaimenkhan/repos/research-comm/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./AuthContext';import{apiService}from'../services/apiService';import{jsx as _jsx}from\"react/jsx-runtime\";const UserContext=/*#__PURE__*/createContext();export const useUser=()=>{const context=useContext(UserContext);if(!context){throw new Error('useUser must be used within a UserProvider');}return context;};export const UserProvider=_ref=>{let{children}=_ref;const{user,isAuthenticated}=useAuth();const[userProfile,setUserProfile]=useState(null);const[userPreferences,setUserPreferences]=useState({primaryLocation:null,additionalLocations:[],interests:[],notificationSettings:{email:true,push:true,inApp:true}});const[loading,setLoading]=useState(false);// Load user profile when authenticated\nuseEffect(()=>{if(isAuthenticated&&user){loadUserProfile();}},[isAuthenticated,user]);const loadUserProfile=async()=>{try{setLoading(true);const profile=await apiService.getUserProfile(user.localAccountId);if(profile){setUserProfile(profile);setUserPreferences(_objectSpread(_objectSpread({},userPreferences),profile.preferences));}else{// Create new user profile\nawait createUserProfile();}}catch(error){console.error('Failed to load user profile:',error);}finally{setLoading(false);}};const createUserProfile=async()=>{try{const newProfile={user_id:user.localAccountId,primary_location:userPreferences.primaryLocation||{city:'Unknown',state:'',country:'USA'},additional_locations:[],interests:[],categories:['news','events','community'],notification_preferences:{email:true,push:true,frequency:'daily'}};const createdProfile=await apiService.createUserProfile(newProfile);setUserProfile(createdProfile);}catch(error){console.error('Failed to create user profile:',error);}};const updateUserProfile=async updates=>{try{const updatedProfile=await apiService.updateUserProfile(user.localAccountId,updates);setUserProfile(updatedProfile);return updatedProfile;}catch(error){console.error('Failed to update user profile:',error);throw error;}};const updatePreferences=async newPreferences=>{try{const updatedPreferences=_objectSpread(_objectSpread({},userPreferences),newPreferences);setUserPreferences(updatedPreferences);await updateUserProfile({preferences:updatedPreferences});}catch(error){console.error('Failed to update preferences:',error);throw error;}};const updateLocation=async function(location){let isPrimary=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;try{const updates=isPrimary?{primaryLocation:location}:{additionalLocations:[...userPreferences.additionalLocations,location]};await updatePreferences(updates);}catch(error){console.error('Failed to update location:',error);throw error;}};const updateInterests=async interests=>{try{await updatePreferences({interests});}catch(error){console.error('Failed to update interests:',error);throw error;}};const value={userProfile,userPreferences,loading,updateUserProfile,updatePreferences,updateLocation,updateInterests,refreshProfile:loadUserProfile};return/*#__PURE__*/_jsx(UserContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","apiService","jsx","_jsx","UserContext","useUser","context","Error","UserProvider","_ref","children","user","isAuthenticated","userProfile","setUserProfile","userPreferences","setUserPreferences","primaryLocation","additionalLocations","interests","notificationSettings","email","push","inApp","loading","setLoading","loadUserProfile","profile","getUserProfile","localAccountId","_objectSpread","preferences","createUserProfile","error","console","newProfile","user_id","primary_location","city","state","country","additional_locations","categories","notification_preferences","frequency","createdProfile","updateUserProfile","updates","updatedProfile","updatePreferences","newPreferences","updatedPreferences","updateLocation","location","isPrimary","arguments","length","undefined","updateInterests","value","refreshProfile","Provider"],"sources":["/Users/mohaimenkhan/repos/research-comm/ui/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { apiService } from '../services/apiService';\n\nconst UserContext = createContext();\n\nexport const useUser = () => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n\nexport const UserProvider = ({ children }) => {\n  const { user, isAuthenticated } = useAuth();\n  const [userProfile, setUserProfile] = useState(null);\n  const [userPreferences, setUserPreferences] = useState({\n    primaryLocation: null,\n    additionalLocations: [],\n    interests: [],\n    notificationSettings: {\n      email: true,\n      push: true,\n      inApp: true\n    }\n  });\n  const [loading, setLoading] = useState(false);\n\n  // Load user profile when authenticated\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadUserProfile();\n    }\n  }, [isAuthenticated, user]);\n\n  const loadUserProfile = async () => {\n    try {\n      setLoading(true);\n      const profile = await apiService.getUserProfile(user.localAccountId);\n\n      if (profile) {\n        setUserProfile(profile);\n        setUserPreferences({\n          ...userPreferences,\n          ...profile.preferences\n        });\n      } else {\n        // Create new user profile\n        await createUserProfile();\n      }\n    } catch (error) {\n      console.error('Failed to load user profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createUserProfile = async () => {\n    try {\n      const newProfile = {\n        user_id: user.localAccountId,\n        primary_location: userPreferences.primaryLocation || {\n          city: 'Unknown',\n          state: '',\n          country: 'USA'\n        },\n        additional_locations: [],\n        interests: [],\n        categories: ['news', 'events', 'community'],\n        notification_preferences: {\n          email: true,\n          push: true,\n          frequency: 'daily'\n        }\n      };\n\n      const createdProfile = await apiService.createUserProfile(newProfile);\n      setUserProfile(createdProfile);\n    } catch (error) {\n      console.error('Failed to create user profile:', error);\n    }\n  };\n\n  const updateUserProfile = async (updates) => {\n    try {\n      const updatedProfile = await apiService.updateUserProfile(\n        user.localAccountId,\n        updates\n      );\n      setUserProfile(updatedProfile);\n      return updatedProfile;\n    } catch (error) {\n      console.error('Failed to update user profile:', error);\n      throw error;\n    }\n  };\n\n  const updatePreferences = async (newPreferences) => {\n    try {\n      const updatedPreferences = { ...userPreferences, ...newPreferences };\n      setUserPreferences(updatedPreferences);\n\n      await updateUserProfile({ preferences: updatedPreferences });\n    } catch (error) {\n      console.error('Failed to update preferences:', error);\n      throw error;\n    }\n  };\n\n  const updateLocation = async (location, isPrimary = true) => {\n    try {\n      const updates = isPrimary\n        ? { primaryLocation: location }\n        : {\n            additionalLocations: [\n              ...userPreferences.additionalLocations,\n              location\n            ]\n          };\n\n      await updatePreferences(updates);\n    } catch (error) {\n      console.error('Failed to update location:', error);\n      throw error;\n    }\n  };\n\n  const updateInterests = async (interests) => {\n    try {\n      await updatePreferences({ interests });\n    } catch (error) {\n      console.error('Failed to update interests:', error);\n      throw error;\n    }\n  };\n\n  const value = {\n    userProfile,\n    userPreferences,\n    loading,\n    updateUserProfile,\n    updatePreferences,\n    updateLocation,\n    updateInterests,\n    refreshProfile: loadUserProfile\n  };\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}