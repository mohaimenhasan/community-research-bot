{"ast":null,"code":"import _objectSpread from\"/Users/mohaimenkhan/repos/research-comm/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Location service for detecting user location and finding nearby cities\nclass LocationService{constructor(){this.currentLocation=null;this.nearbyCities=[];}// Calculate distance between two coordinates in miles\ncalculateDistance(lat1,lon1,lat2,lon2){const R=3959;// Earth's radius in miles\nconst dLat=this.toRadians(lat2-lat1);const dLon=this.toRadians(lon2-lon1);const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(this.toRadians(lat1))*Math.cos(this.toRadians(lat2))*Math.sin(dLon/2)*Math.sin(dLon/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;}toRadians(degrees){return degrees*(Math.PI/180);}// Comprehensive list of North American cities with coordinates\ngetAllCities(){return[// Pacific Northwest\n{city:'Seattle',state:'WA',country:'USA',coordinates:[47.6062,-122.3321]},{city:'Portland',state:'OR',country:'USA',coordinates:[45.5152,-122.6784]},{city:'Vancouver',province:'BC',country:'Canada',coordinates:[49.2827,-123.1207]},{city:'Tacoma',state:'WA',country:'USA',coordinates:[47.2529,-122.4443]},{city:'Spokane',state:'WA',country:'USA',coordinates:[47.6588,-117.4260]},{city:'Eugene',state:'OR',country:'USA',coordinates:[44.0521,-123.0868]},{city:'Bellingham',state:'WA',country:'USA',coordinates:[48.7519,-122.4787]},{city:'Olympia',state:'WA',country:'USA',coordinates:[47.0379,-122.9015]},{city:'Everett',state:'WA',country:'USA',coordinates:[47.9790,-122.2021]},{city:'Bellevue',state:'WA',country:'USA',coordinates:[47.6101,-122.2015]},{city:'Renton',state:'WA',country:'USA',coordinates:[47.4829,-122.2171]},{city:'Kent',state:'WA',country:'USA',coordinates:[47.3809,-122.2348]},{city:'Redmond',state:'WA',country:'USA',coordinates:[47.6740,-122.1215]},{city:'Kirkland',state:'WA',country:'USA',coordinates:[47.6815,-122.2087]},{city:'Bothell',state:'WA',country:'USA',coordinates:[47.7623,-122.2054]},{city:'Lynnwood',state:'WA',country:'USA',coordinates:[47.8209,-122.3151]},{city:'Edmonds',state:'WA',country:'USA',coordinates:[47.8106,-122.3774]},{city:'Mukilteo',state:'WA',country:'USA',coordinates:[47.9445,-122.3046]},{city:'Federal Way',state:'WA',country:'USA',coordinates:[47.3223,-122.3126]},{city:'Tukwila',state:'WA',country:'USA',coordinates:[47.4740,-122.2607]},// British Columbia cities near Seattle\n{city:'Burnaby',province:'BC',country:'Canada',coordinates:[49.2488,-122.9805]},{city:'Richmond',province:'BC',country:'Canada',coordinates:[49.1666,-123.1336]},{city:'Surrey',province:'BC',country:'Canada',coordinates:[49.1913,-122.8490]},{city:'Langley',province:'BC',country:'Canada',coordinates:[49.1042,-122.6604]},{city:'Coquitlam',province:'BC',country:'Canada',coordinates:[49.2838,-122.7932]},{city:'Delta',province:'BC',country:'Canada',coordinates:[49.0847,-123.0587]},{city:'North Vancouver',province:'BC',country:'Canada',coordinates:[49.3161,-123.0716]},{city:'West Vancouver',province:'BC',country:'Canada',coordinates:[49.3683,-123.1624]},{city:'New Westminster',province:'BC',country:'Canada',coordinates:[49.2057,-122.9110]},{city:'Port Coquitlam',province:'BC',country:'Canada',coordinates:[49.2625,-122.7816]},{city:'White Rock',province:'BC',country:'Canada',coordinates:[49.0258,-122.8031]},{city:'Maple Ridge',province:'BC',country:'Canada',coordinates:[49.2197,-122.6016]},{city:'Pitt Meadows',province:'BC',country:'Canada',coordinates:[49.2311,-122.6869]},{city:'Abbotsford',province:'BC',country:'Canada',coordinates:[49.0504,-122.3045]},{city:'Chilliwack',province:'BC',country:'Canada',coordinates:[49.1579,-121.9514]},{city:'Mission',province:'BC',country:'Canada',coordinates:[49.1328,-122.3020]},// Major US West Coast cities\n{city:'San Francisco',state:'CA',country:'USA',coordinates:[37.7749,-122.4194]},{city:'Los Angeles',state:'CA',country:'USA',coordinates:[34.0522,-118.2437]},{city:'San Diego',state:'CA',country:'USA',coordinates:[32.7157,-117.1611]},{city:'Sacramento',state:'CA',country:'USA',coordinates:[38.5816,-121.4944]},{city:'Oakland',state:'CA',country:'USA',coordinates:[37.8044,-122.2712]},{city:'San Jose',state:'CA',country:'USA',coordinates:[37.3382,-121.8863]},// Canadian major cities\n{city:'Toronto',province:'ON',country:'Canada',coordinates:[43.6532,-79.3832]},{city:'Montreal',province:'QC',country:'Canada',coordinates:[45.5017,-73.5673]},{city:'Calgary',province:'AB',country:'Canada',coordinates:[51.0447,-114.0719]},{city:'Ottawa',province:'ON',country:'Canada',coordinates:[45.4215,-75.6972]},{city:'Edmonton',province:'AB',country:'Canada',coordinates:[53.5461,-113.4938]},{city:'Winnipeg',province:'MB',country:'Canada',coordinates:[49.8951,-97.1384]},{city:'Victoria',province:'BC',country:'Canada',coordinates:[48.4284,-123.3656]},{city:'Kelowna',province:'BC',country:'Canada',coordinates:[49.8880,-119.4960]},{city:'Kamloops',province:'BC',country:'Canada',coordinates:[50.6745,-120.3273]},{city:'Prince George',province:'BC',country:'Canada',coordinates:[53.9171,-122.7497]}];}// Get user's current location using geolocation API\nasync getCurrentLocation(){return new Promise((resolve,reject)=>{if(!navigator.geolocation){reject(new Error('Geolocation is not supported by this browser'));return;}navigator.geolocation.getCurrentPosition(async position=>{const{latitude,longitude}=position.coords;try{// Try to reverse geocode to get city name\nconst cityName=await this.reverseGeocode(latitude,longitude);const location={coordinates:[latitude,longitude],city:cityName.city||'Unknown City',state:cityName.state||cityName.province,country:cityName.country||'USA',detected:true};this.currentLocation=location;resolve(location);}catch(error){// If reverse geocoding fails, still return coordinates\nconst location={coordinates:[latitude,longitude],city:'Current Location',state:'',country:'',detected:true};this.currentLocation=location;resolve(location);}},error=>{console.error('Geolocation error:',error);reject(error);},{enableHighAccuracy:true,timeout:10000,maximumAge:300000// 5 minutes\n});});}// Simple reverse geocoding - in production you'd use a real service\nasync reverseGeocode(lat,lon){// For demo, find the closest city in our database\nconst cities=this.getAllCities();let closestCity=null;let minDistance=Infinity;cities.forEach(city=>{const distance=this.calculateDistance(lat,lon,city.coordinates[0],city.coordinates[1]);if(distance<minDistance){minDistance=distance;closestCity=city;}});return closestCity||{city:'Unknown',state:'',country:''};}// Get cities within specified radius (in miles)\ngetCitiesWithinRadius(centerLat,centerLon){let radiusMiles=arguments.length>2&&arguments[2]!==undefined?arguments[2]:100;const cities=this.getAllCities();const nearbyCities=[];cities.forEach(city=>{const distance=this.calculateDistance(centerLat,centerLon,city.coordinates[0],city.coordinates[1]);if(distance<=radiusMiles){nearbyCities.push(_objectSpread(_objectSpread({},city),{},{distance:Math.round(distance)}));}});// Sort by distance\nnearbyCities.sort((a,b)=>a.distance-b.distance);this.nearbyCities=nearbyCities;return nearbyCities;}// Search cities by name\nsearchCities(query){if(!query||query.length<2)return[];const cities=this.getAllCities();const lowerQuery=query.toLowerCase();return cities.filter(city=>city.city.toLowerCase().includes(lowerQuery)||city.state&&city.state.toLowerCase().includes(lowerQuery)||city.province&&city.province.toLowerCase().includes(lowerQuery)).slice(0,10);// Limit to 10 results\n}// Format location for display\nformatLocation(location){if(location.state){return\"\".concat(location.city,\", \").concat(location.state);}else if(location.province){return\"\".concat(location.city,\", \").concat(location.province);}return location.city;}// Get popular locations for the area\ngetPopularLocationsForArea(lat,lon){// Get cities within 200 miles and pick the most populous/important ones\nconst nearby=this.getCitiesWithinRadius(lat,lon,200);// Define important cities based on population/significance\nconst importantCities=['Seattle','Vancouver','Portland','Spokane','Tacoma','Bellevue','Toronto','Montreal','Calgary','San Francisco','Los Angeles','San Diego'];const popular=nearby.filter(city=>importantCities.includes(city.city)).slice(0,8);// If we don't have enough popular cities, add closest ones\nif(popular.length<8){const additional=nearby.filter(city=>!popular.find(p=>p.city===city.city)).slice(0,8-popular.length);popular.push(...additional);}return popular;}}export default new LocationService();","map":{"version":3,"names":["LocationService","constructor","currentLocation","nearbyCities","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","toRadians","dLon","a","Math","sin","cos","c","atan2","sqrt","degrees","PI","getAllCities","city","state","country","coordinates","province","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","latitude","longitude","coords","cityName","reverseGeocode","location","detected","error","console","enableHighAccuracy","timeout","maximumAge","lat","lon","cities","closestCity","minDistance","Infinity","forEach","distance","getCitiesWithinRadius","centerLat","centerLon","radiusMiles","arguments","length","undefined","push","_objectSpread","round","sort","b","searchCities","query","lowerQuery","toLowerCase","filter","includes","slice","formatLocation","concat","getPopularLocationsForArea","nearby","importantCities","popular","additional","find","p"],"sources":["/Users/mohaimenkhan/repos/research-comm/ui/src/services/locationService.js"],"sourcesContent":["// Location service for detecting user location and finding nearby cities\nclass LocationService {\n  constructor() {\n    this.currentLocation = null;\n    this.nearbyCities = [];\n  }\n\n  // Calculate distance between two coordinates in miles\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a =\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  toRadians(degrees) {\n    return degrees * (Math.PI/180);\n  }\n\n  // Comprehensive list of North American cities with coordinates\n  getAllCities() {\n    return [\n      // Pacific Northwest\n      { city: 'Seattle', state: 'WA', country: 'USA', coordinates: [47.6062, -122.3321] },\n      { city: 'Portland', state: 'OR', country: 'USA', coordinates: [45.5152, -122.6784] },\n      { city: 'Vancouver', province: 'BC', country: 'Canada', coordinates: [49.2827, -123.1207] },\n      { city: 'Tacoma', state: 'WA', country: 'USA', coordinates: [47.2529, -122.4443] },\n      { city: 'Spokane', state: 'WA', country: 'USA', coordinates: [47.6588, -117.4260] },\n      { city: 'Eugene', state: 'OR', country: 'USA', coordinates: [44.0521, -123.0868] },\n      { city: 'Bellingham', state: 'WA', country: 'USA', coordinates: [48.7519, -122.4787] },\n      { city: 'Olympia', state: 'WA', country: 'USA', coordinates: [47.0379, -122.9015] },\n      { city: 'Everett', state: 'WA', country: 'USA', coordinates: [47.9790, -122.2021] },\n      { city: 'Bellevue', state: 'WA', country: 'USA', coordinates: [47.6101, -122.2015] },\n      { city: 'Renton', state: 'WA', country: 'USA', coordinates: [47.4829, -122.2171] },\n      { city: 'Kent', state: 'WA', country: 'USA', coordinates: [47.3809, -122.2348] },\n      { city: 'Redmond', state: 'WA', country: 'USA', coordinates: [47.6740, -122.1215] },\n      { city: 'Kirkland', state: 'WA', country: 'USA', coordinates: [47.6815, -122.2087] },\n      { city: 'Bothell', state: 'WA', country: 'USA', coordinates: [47.7623, -122.2054] },\n      { city: 'Lynnwood', state: 'WA', country: 'USA', coordinates: [47.8209, -122.3151] },\n      { city: 'Edmonds', state: 'WA', country: 'USA', coordinates: [47.8106, -122.3774] },\n      { city: 'Mukilteo', state: 'WA', country: 'USA', coordinates: [47.9445, -122.3046] },\n      { city: 'Federal Way', state: 'WA', country: 'USA', coordinates: [47.3223, -122.3126] },\n      { city: 'Tukwila', state: 'WA', country: 'USA', coordinates: [47.4740, -122.2607] },\n\n      // British Columbia cities near Seattle\n      { city: 'Burnaby', province: 'BC', country: 'Canada', coordinates: [49.2488, -122.9805] },\n      { city: 'Richmond', province: 'BC', country: 'Canada', coordinates: [49.1666, -123.1336] },\n      { city: 'Surrey', province: 'BC', country: 'Canada', coordinates: [49.1913, -122.8490] },\n      { city: 'Langley', province: 'BC', country: 'Canada', coordinates: [49.1042, -122.6604] },\n      { city: 'Coquitlam', province: 'BC', country: 'Canada', coordinates: [49.2838, -122.7932] },\n      { city: 'Delta', province: 'BC', country: 'Canada', coordinates: [49.0847, -123.0587] },\n      { city: 'North Vancouver', province: 'BC', country: 'Canada', coordinates: [49.3161, -123.0716] },\n      { city: 'West Vancouver', province: 'BC', country: 'Canada', coordinates: [49.3683, -123.1624] },\n      { city: 'New Westminster', province: 'BC', country: 'Canada', coordinates: [49.2057, -122.9110] },\n      { city: 'Port Coquitlam', province: 'BC', country: 'Canada', coordinates: [49.2625, -122.7816] },\n      { city: 'White Rock', province: 'BC', country: 'Canada', coordinates: [49.0258, -122.8031] },\n      { city: 'Maple Ridge', province: 'BC', country: 'Canada', coordinates: [49.2197, -122.6016] },\n      { city: 'Pitt Meadows', province: 'BC', country: 'Canada', coordinates: [49.2311, -122.6869] },\n      { city: 'Abbotsford', province: 'BC', country: 'Canada', coordinates: [49.0504, -122.3045] },\n      { city: 'Chilliwack', province: 'BC', country: 'Canada', coordinates: [49.1579, -121.9514] },\n      { city: 'Mission', province: 'BC', country: 'Canada', coordinates: [49.1328, -122.3020] },\n\n      // Major US West Coast cities\n      { city: 'San Francisco', state: 'CA', country: 'USA', coordinates: [37.7749, -122.4194] },\n      { city: 'Los Angeles', state: 'CA', country: 'USA', coordinates: [34.0522, -118.2437] },\n      { city: 'San Diego', state: 'CA', country: 'USA', coordinates: [32.7157, -117.1611] },\n      { city: 'Sacramento', state: 'CA', country: 'USA', coordinates: [38.5816, -121.4944] },\n      { city: 'Oakland', state: 'CA', country: 'USA', coordinates: [37.8044, -122.2712] },\n      { city: 'San Jose', state: 'CA', country: 'USA', coordinates: [37.3382, -121.8863] },\n\n      // Canadian major cities\n      { city: 'Toronto', province: 'ON', country: 'Canada', coordinates: [43.6532, -79.3832] },\n      { city: 'Montreal', province: 'QC', country: 'Canada', coordinates: [45.5017, -73.5673] },\n      { city: 'Calgary', province: 'AB', country: 'Canada', coordinates: [51.0447, -114.0719] },\n      { city: 'Ottawa', province: 'ON', country: 'Canada', coordinates: [45.4215, -75.6972] },\n      { city: 'Edmonton', province: 'AB', country: 'Canada', coordinates: [53.5461, -113.4938] },\n      { city: 'Winnipeg', province: 'MB', country: 'Canada', coordinates: [49.8951, -97.1384] },\n      { city: 'Victoria', province: 'BC', country: 'Canada', coordinates: [48.4284, -123.3656] },\n      { city: 'Kelowna', province: 'BC', country: 'Canada', coordinates: [49.8880, -119.4960] },\n      { city: 'Kamloops', province: 'BC', country: 'Canada', coordinates: [50.6745, -120.3273] },\n      { city: 'Prince George', province: 'BC', country: 'Canada', coordinates: [53.9171, -122.7497] },\n    ];\n  }\n\n  // Get user's current location using geolocation API\n  async getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation is not supported by this browser'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n\n          try {\n            // Try to reverse geocode to get city name\n            const cityName = await this.reverseGeocode(latitude, longitude);\n            const location = {\n              coordinates: [latitude, longitude],\n              city: cityName.city || 'Unknown City',\n              state: cityName.state || cityName.province,\n              country: cityName.country || 'USA',\n              detected: true\n            };\n\n            this.currentLocation = location;\n            resolve(location);\n          } catch (error) {\n            // If reverse geocoding fails, still return coordinates\n            const location = {\n              coordinates: [latitude, longitude],\n              city: 'Current Location',\n              state: '',\n              country: '',\n              detected: true\n            };\n\n            this.currentLocation = location;\n            resolve(location);\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          reject(error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000 // 5 minutes\n        }\n      );\n    });\n  }\n\n  // Simple reverse geocoding - in production you'd use a real service\n  async reverseGeocode(lat, lon) {\n    // For demo, find the closest city in our database\n    const cities = this.getAllCities();\n    let closestCity = null;\n    let minDistance = Infinity;\n\n    cities.forEach(city => {\n      const distance = this.calculateDistance(lat, lon, city.coordinates[0], city.coordinates[1]);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestCity = city;\n      }\n    });\n\n    return closestCity || { city: 'Unknown', state: '', country: '' };\n  }\n\n  // Get cities within specified radius (in miles)\n  getCitiesWithinRadius(centerLat, centerLon, radiusMiles = 100) {\n    const cities = this.getAllCities();\n    const nearbyCities = [];\n\n    cities.forEach(city => {\n      const distance = this.calculateDistance(\n        centerLat, centerLon,\n        city.coordinates[0], city.coordinates[1]\n      );\n\n      if (distance <= radiusMiles) {\n        nearbyCities.push({\n          ...city,\n          distance: Math.round(distance)\n        });\n      }\n    });\n\n    // Sort by distance\n    nearbyCities.sort((a, b) => a.distance - b.distance);\n\n    this.nearbyCities = nearbyCities;\n    return nearbyCities;\n  }\n\n  // Search cities by name\n  searchCities(query) {\n    if (!query || query.length < 2) return [];\n\n    const cities = this.getAllCities();\n    const lowerQuery = query.toLowerCase();\n\n    return cities.filter(city =>\n      city.city.toLowerCase().includes(lowerQuery) ||\n      (city.state && city.state.toLowerCase().includes(lowerQuery)) ||\n      (city.province && city.province.toLowerCase().includes(lowerQuery))\n    ).slice(0, 10); // Limit to 10 results\n  }\n\n  // Format location for display\n  formatLocation(location) {\n    if (location.state) {\n      return `${location.city}, ${location.state}`;\n    } else if (location.province) {\n      return `${location.city}, ${location.province}`;\n    }\n    return location.city;\n  }\n\n  // Get popular locations for the area\n  getPopularLocationsForArea(lat, lon) {\n    // Get cities within 200 miles and pick the most populous/important ones\n    const nearby = this.getCitiesWithinRadius(lat, lon, 200);\n\n    // Define important cities based on population/significance\n    const importantCities = ['Seattle', 'Vancouver', 'Portland', 'Spokane', 'Tacoma', 'Bellevue', 'Toronto', 'Montreal', 'Calgary', 'San Francisco', 'Los Angeles', 'San Diego'];\n\n    const popular = nearby.filter(city =>\n      importantCities.includes(city.city)\n    ).slice(0, 8);\n\n    // If we don't have enough popular cities, add closest ones\n    if (popular.length < 8) {\n      const additional = nearby\n        .filter(city => !popular.find(p => p.city === city.city))\n        .slice(0, 8 - popular.length);\n      popular.push(...additional);\n    }\n\n    return popular;\n  }\n}\n\nexport default new LocationService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}